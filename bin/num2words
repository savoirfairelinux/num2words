#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2003, Taro Ogawa.  All Rights Reserved.
# Copyright (c) 2013, Savoir-faire Linux inc.  All Rights Reserved.

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA

"""\
Usage:
    num2words [options] <number>
    num2words --list-languages
    num2words --list-converters
    num2words --help

Arguments:
    <number>                Number you want to convert into words

Options:
    -L --list-languages     Show all languages.
    -C --list-converters    Show all converters.
    -l --lang=<lang>        Output language [default: en].
    -t --to=<to>            Output converter [default: cardinal].
    -h --help               Show this message.
    -v --version            Show version.

Examples:
    $ num2words 10001
    ten thousand and one

    $ num2words 24,120.10
    twenty-four thousand, one hundred and twenty point one

    $ num2words 24,120.10 -l es
    veinticuatro mil ciento veinte punto uno

    $num2words 2.14 -l es --to currency
    dos euros con catorce c√©ntimos
"""

from __future__ import print_function, unicode_literals

import argparse
import os
import sys

import num2words

__version__ = "0.5.14"
__license__ = "LGPL"


def get_languages():
    return sorted(list(num2words.CONVERTER_CLASSES.keys()))


def get_converters():
    return sorted(list(num2words.CONVERTES_TYPES))


class HelpFormatter(argparse.RawTextHelpFormatter):
    def add_usage(self, *a, **b):
        super().add_usage(*a, prefix='')    # default: 'usage: '

    def format_usage(self, *a, **b):
        return __doc__

    def add_arguments(self, *a, **b):
        # don't repeat arguments
        pass


def _list_lang(args):
    for lang in get_languages():
        sys.stdout.write(lang)
        sys.stdout.write(os.linesep)
    sys.exit(0)


def _list_conv(args):
    for cvt in get_converters():
        sys.stdout.write(cvt)
        sys.stdout.write(os.linesep)
    sys.exit(0)


def _num(args):
    try:
        words = num2words.num2words(args.number, lang=args.lang, to=args.to)
        sys.stdout.write(words + os.linesep)
        sys.exit(0)
    except Exception as err:
        sys.stderr.write(str(args.number))
        sys.stderr.write(str(err) + os.linesep)
        sys.stderr.write(__doc__)
        sys.exit(1)

def main():
    version = "{}=={}".format(os.path.basename(__file__), __version__)

    parser = argparse.ArgumentParser(
                prog='num2words',
                description='convert numbers into words',
                usage=__doc__,
                formatter_class=HelpFormatter)

    parser.add_argument('-l', '--lang', type=str, default='en')
    parser.add_argument('-t', '--to', type=str, default='cardinal')
    parser.add_argument('number', type=str, nargs='?')

    parser.add_argument('-L', '--list-languages', action='store_true')
    parser.add_argument('-C', '--list-converters', action='store_true')
    parser.add_argument('-v', '--version', action='version', version=version)

    args = parser.parse_args()
    if args.list_languages:
        _list_lang(args)
    elif args.list_converters:
        _list_conv(args)
    elif args.number is not None:
        _num(args)
    else:
        parser.print_help(file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
